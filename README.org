#+startup: hidestars odd

* Problem

  Many Hackage packages don't build on pre-release/new major versions of GHC.

  In particular, as of the time of this article writing, that was
  true for GHC 8.

  Yet, unreleased versions, including those from third parties, might contain
  fixes for those problems, which even if hacky/temporary, can be of use for early
  adopters of fresh GHC versions.

  Those remain unavailable to the average sufferer, and sufferers
  remain uncoordinated.

* What

  This package is an attempt to provide a deep override for =haskellPackages=,
  gathering all such bleeding edge fixes in one place.

* How to use

  The layout assumption is that the user clones the
  =nixpkgs-haskellpackages-overrides= repository alongside her project.

  Then, a typical usage (via =shell.nix=) would look as follows:

  #+begin_src nix
  { nixpkgs ? import <nixpkgs> {}, compiler ? "ghc801" }:

  let

    inherit (nixpkgs) pkgs;

    f = import ./.; # your default.nix

    haskell             = pkgs.haskell;
    haskellPackagesOrig = haskell.packages.${compiler};

    haskellPackages     = import ../nixpkgs-haskellpackages-overrides/ghc801.nix
                            pkgs haskellPackagesOrig;

    drv = haskellPackages.callPackage f {};

  in

    if pkgs.lib.inNixShell then drv.env else drv
  #+end_src

  ..where your =default.nix= is a typical =haskellPackages=-styled derivation
  function, such as:

  #+begin_src nix
  { stdenv, mkDerivation, ... }:
  mkDerivation {
    pname        = "...";
    version      = "...";
    src          = ./.;
    isLibrary    = ...;
    isExecutable = ...;
    buildDepends = [ ... ];
    description  = "...";
    license      = stdenv.lib.licenses.agpl3;
  }
  #+end_src

* Important disclaimer

  A necessary disclaimer is that the set of overrides is not necessarily minimal
  -- that is, as:

    1. Hackage gains releases of fixed versions of libraries, /and/
    2. Nixpkgs gets updates with fresh imports of Hackage

  ..some of the overrides in the provided expression will become excessive.

  There is an intent to minimize such excess overrides, as they, by their nature
  lead to freezing of package versions -- still, no guarantees can be provided.
